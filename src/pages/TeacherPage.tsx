import React, { useState, useEffect } from 'react';
import { useUser } from '../context/UserContext';
import './TeacherStyle.css';
import { useNavigate } from 'react-router-dom';

// –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã-–∑–∞–≥–ª—É—à–∫–∏
const Header: React.FC = () => {
  return (
    <header className="teacher-header">
      <div className="header-content">
        <div className="header-logo">
          <h1>–¶–∏—Ñ—Ä–æ–≤–æ–π –¥–Ω–µ–≤–Ω–∏–∫</h1>
          <p>–ü–æ–ª–∏—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–ª–ª–µ–¥–∂ Hoary</p>
        </div>
        <div className="header-actions">
          <button className="notification-btn">
            <span>üîî</span>
          </button>
          <button className="logout-btn">
            –í—ã–π—Ç–∏
          </button>
        </div>
      </div>
    </header>
  );
};

const DisciplinesSection: React.FC = () => {
  return (
    <div className="disciplines-section">
      <h2>–ú–æ–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã</h2>
      <p>–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</p>
    </div>
  );
};

const GroupsSection: React.FC = () => {
  return (
    <div className="groups-section">
      <h2>–ú–æ–∏ –≥—Ä—É–ø–ø—ã</h2>
      <p>–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</p>
    </div>
  );
};

const PersonalCabinet: React.FC = () => {
  const { user } = useUser();
  
  return (
    <div className="personal-cabinet">
      <h2>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è</h2>
      <div className="personal-info">
        <div className="info-row">
          <label>–§–∞–º–∏–ª–∏—è:</label>
          <span>{user?.lastName || '–§–∞–º–∏–ª–∏—è'}</span>
        </div>
        <div className="info-row">
          <label>–ò–º—è:</label>
          <span>{user?.name || '–ò–º—è'}</span>
        </div>
        <div className="info-row">
          <label>–û—Ç—á–µ—Å—Ç–≤–æ:</label>
          <span>{user?.surname || '–û—Ç—á–µ—Å—Ç–≤–æ'}</span>
        </div>
        <div className="info-row">
          <label>–≠–ª. –ø–æ—á—Ç–∞:</label>
          <span>teacher@college.ru</span>
        </div>
        <div className="info-row">
          <label>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</label>
          <span>–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞</span>
        </div>
        <div className="info-row">
          <label>–û–±—â–∏–π —Å—Ç–∞–∂:</label>
          <span>27 –ª–µ—Ç</span>
        </div>
      </div>
    </div>
  );
};

const ScheduleSection: React.FC = () => {
  return (
    <div className="schedule-section">
      <h2>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π</h2>
      <p>–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</p>
    </div>
  );
};

export const TeacherPage: React.FC = () => {
  const [activeTab, setActiveTab] = useState('disciplines');
  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);
  const { user } = useUser();
  const navigate = useNavigate();

  useEffect(() => {
    if (!user) {
      console.log('No user data, redirecting to login');
      navigate('/login');
    } else {
      console.log('User data in TeacherPage:', user);
    }
  }, [user, navigate]);

  const renderContent = () => {
    switch (activeTab) {
      case 'disciplines':
        return <DisciplinesSection />;
      case 'groups':
        return <GroupsSection />;
      case 'personal':
        return <PersonalCabinet />;
      case 'schedule':
        return <ScheduleSection />;
      default:
        return <DisciplinesSection />;
    }
  };

  const getTabIcon = (tabName: string) => {
    switch (tabName) {
      case 'disciplines':
        return <span className="nav-icon-placeholder">üìö</span>;
      case 'groups':
        return <span className="nav-icon-placeholder">üë•</span>;
      case 'personal':
        return <span className="nav-icon-placeholder">üë§</span>;
      case 'schedule':
        return <span className="nav-icon-placeholder">üìÖ</span>;
      default:
        return <span className="nav-icon-placeholder">üìö</span>;
    }
  };

  const getIcon = (tabName: string) => {
    switch (tabName) {
      case 'disciplines':
        return <span className="nav-white-icon-placeholder">üìö</span>;
      case 'groups':
        return <span className="nav-white-icon-placeholder">üë•</span>;
      case 'personal':
        return <span className="nav-white-icon-placeholder">üë§</span>;
      case 'schedule':
        return <span className="nav-white-icon-placeholder">üìÖ</span>;
      default:
        return <span className="nav-white-icon-placeholder">üìö</span>;
    }
  };

  const getTabTitle = (tabName: string) => {
    switch (tabName) {
      case 'disciplines':
        return '–î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã';
      case 'groups':
        return '–ì—Ä—É–ø–ø—ã';
      case 'personal':
        return '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç';
      case 'schedule':
        return '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ';
      default:
        return '–î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã';
    }
  };

  const getTabSubTitle = (tabName: string) => {
    switch (tabName) {
      case 'disciplines':
        return '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–±–Ω—ã–º–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º–∏';
      case 'groups':
        return '–ú–æ–∏ —É—á–µ–±–Ω—ã–µ –≥—Ä—É–ø–ø—ã';
      case 'personal':
        return '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏';
      case 'schedule':
        return '–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π';
      default:
        return '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–±–Ω—ã–º–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º–∏';
    }
  };

  const handleSidebarToggle = () => {
    setSidebarCollapsed(prev => !prev);
  };

  if (!user) {
    return (
      <div className="teacher-container">
        <div className="teacher-content">
          <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>
        </div>
      </div>
    );
  }

  return (
    <div className="teacher-container">
      <div className="background-animation">
        <div className="shape shape-1"></div>
        <div className="shape shape-2"></div>
        <div className="shape shape-3"></div>
      </div>

      <div className="teacher-content">
        <Header />

        <div className={`teacher-main ${sidebarCollapsed ? 'sidebar-collapsed' : ''}`}>
          <aside className={`t-sidebar ${sidebarCollapsed ? 'collapsed' : ''}`}>
            <button
              className="sidebar-toggle"
              onClick={handleSidebarToggle}
              aria-label={sidebarCollapsed ? '–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –ø–∞–Ω–µ–ª—å' : '–°–≤–µ—Ä–Ω—É—Ç—å –ø–∞–Ω–µ–ª—å'}
            >
              {sidebarCollapsed ? '‚Üí' : '‚Üê'}
            </button>

            <div className="sidebar-header">
              <div className="user-info">
                <p className="user-name">{user.lastName} {user.name}</p>
                <p className="user-patronymic">{user.surname}</p>
                <p className="user-role">–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å</p>
                <p className="user-department">–ü–æ–ª–∏—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–ª–ª–µ–¥–∂ Hoary</p>
              </div>
            </div>

            <nav className="sidebar-nav">
              {['disciplines', 'groups', 'personal', 'schedule'].map((tab) => (
                <button
                  key={tab}
                  className={`nav-item ${activeTab === tab ? 'active' : ''}`}
                  onClick={() => setActiveTab(tab)}
                  data-tooltip={sidebarCollapsed ? getTabTitle(tab) : ''}
                >
                  <span className="nav-icon">{getTabIcon(tab)}</span>
                  <span className="nav-text">{getTabTitle(tab)}</span>
                  {activeTab === tab && !sidebarCollapsed && <div className="nav-indicator"></div>}
                </button>
              ))}
            </nav>

            <div className="sidebar-footer">
              <div className="quick-stats">
                <div className="stat-item">
                  <p className="stat-value">{user.disciplinesCount || '5'}</p>
                  <p className="stat-label">–î–∏—Å—Ü–∏–ø–ª–∏–Ω</p>
                </div>
                <div className="stat-item">
                  <p className="stat-value">{user.groupsCount || '3'}</p>
                  <p className="stat-label">–ì—Ä—É–ø–ø</p>
                </div>
              </div>
            </div>
          </aside>

          <main className="content-area">
            <div className="content-header">
              <h1 className="content-title">
                <span className="title-icon">{getIcon(activeTab)}</span>
                <p className="content-title-text">{getTabTitle(activeTab)}</p>
                <p className="content-subtitle">{getTabSubTitle(activeTab)}</p>
              </h1>
            </div>

            <div className="content-card">{renderContent()}</div>
          </main>
        </div>
      </div>
    </div>
  );
};